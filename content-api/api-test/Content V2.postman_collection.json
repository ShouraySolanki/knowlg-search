{
	"info": {
		"_postman_id": "c1421998-1fcb-44c7-9db1-9421f27b0a98",
		"name": "Content V2",
		"description": "The Content Management APIs allow you to create, manage and process content on the Sunbird platform. Content is the basic building block of the Knowledge Service. Some examples would be Videos, Audio, Pdfs, Html, ECML etc. The basic operations for this API include Create, Update, Read, Review, Publish.\n\nThe URL for Content Management API(s) is /content/v1.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1419050"
	},
	"item": [
		{
			"name": "Content Create ",
			"item": [
				{
					"name": "Content Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json()",
									"",
									"//Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Content-Encoding header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Encoding\");",
									"});",
									"pm.test(\"Content-Encoding header is gzip\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('gzip');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
									"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
									"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.msgid).to.be.null;",
									"  pm.expect(jsonResponse.params.err).to.be.null;",
									"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
									"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
									"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
									"});",
									"",
									"//Validation",
									"pm.test(\"id should be api.content.create\", function () {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
									"});",
									"pm.test(\"ver should be 4.0\", function () {",
									"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
									"});",
									"pm.test(\"params.status should be successful\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
									"});",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									"",
									"// Set global variable",
									"pm.globals.set(\"content_id\", jsonResponse.result.identifier);",
									"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}"
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}"
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{host}}/content/v2/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"content",
								"v2",
								"create"
							]
						},
						"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": [
						{
							"name": "Content Create - 200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "userId",
										"value": "user",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "connect.sid=s%3AyRLPeHt6zZ93WjZ2BD_Cejc11xNN-isK.ANbL%2FZ1t88yXax%2BiXjGFVtgFUAKhoWdl%2FgXU4yBX9rU; 81f30cf708470b974874c8a96a6bcdb2=l99ob678op07nq0qs5i0dae0m3; AWSELB=83D53DFF08C363B9195F6717118E44E326DE55CB796FB96A69500BA54C477B7512D6342B64B0B494BBD6699FCFFFB308C0DC9247AA23DA73B4F62BA4C399A735F647C86F50",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"API DOCUMENTATION CONTENT\",\n            \"mimeType\": \"application/pdf\",\n            \"code\": \"api-docs\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{host}}/content/v2/create",
									"host": [
										"{{host}}"
									],
									"path": [
										"content",
										"v2",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 23 Nov 2020 06:42:39 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29991"
								},
								{
									"key": "Referrer-Policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "55"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "master-only"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "53"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "36"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.content.create\",\n    \"ver\": \"1.0\",\n    \"ts\": \"2020-12-09T11:11:12.697Z\",\n    \"params\": {\n        \"resmsgid\": \"3f5de290-3a0f-11eb-be5b-f9d249ba9049\",\n        \"msgid\": \"3f57a100-3a0f-11eb-be5b-f9d249ba9049\",\n        \"status\": \"successful\",\n        \"err\": null,\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"content_id\": \"do_1131687405374504961738\",\n        \"versionKey\": \"1607512272640\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Content Read",
			"item": [
				{
					"name": "Content Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json()",
									"",
									"//Verification",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"});",
									"",
									"//code name contains a string",
									"tests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Content-Encoding header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Encoding\");",
									"});",
									"pm.test(\"Content-Encoding header is gzip\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('gzip');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
									"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
									"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.msgid).to.be.null;",
									"  pm.expect(jsonResponse.params.err).to.be.null;",
									"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys('content');",
									"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
									"  pm.expect(jsonResponse.result.content).to.have.any.keys('identifier', 'versionKey', 'code', 'channel', 'mimeType', 'createdOn', 'primaryCategory', 'contentDisposition', 'contentEncoding', 'objectType', 'visibility', 'discussionForum', 'license', 'version', 'compatibilityLevel', 'name', 'status');",
									"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.content.versionKey).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.content.version).to.be.a(\"number\");",
									"  pm.expect(jsonResponse.result.content.channel).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.a(\"number\");",
									"  pm.expect(jsonResponse.result.content.ownershipType).to.be.an(\"array\");",
									"  pm.expect(jsonResponse.result.content.trackable).to.be.an(\"object\");",
									"});",
									"",
									"//Validation",
									"pm.test(\"id should be api.content.read\", function () {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
									"});",
									"pm.test(\"ver should be 4.0\", () => {",
									"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
									"});",
									"pm.test(\"params.status should be successful\", () => {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
									"});",
									"pm.test(\"responseCode should be OK\", () => {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), () => {",
									"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.globals.get(\"content_id\"));",
									"});",
									"pm.test(\"objectType should be Content\", () => {",
									"    pm.expect(jsonResponse.result.content.objectType).to.eql(\"Content\");",
									"});",
									"pm.test(\"visibility should be Default\", () => {",
									"    pm.expect(jsonResponse.result.content.visibility).to.eql(\"Default\");",
									"});",
									"pm.test(\"compatibilityLevel should be 1\", () => {",
									"    pm.expect(jsonResponse.result.content.compatibilityLevel).to.eql(1);",
									"});",
									"pm.test(\"status should be Draft\", () => {",
									"    pm.expect(jsonResponse.result.content.status).to.eql(\"Draft\");",
									"});",
									"",
									"pm.globals.set(\"versionKey\", jsonResponse.result.content.versionKey);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/content/v2/read/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"content",
								"v2",
								"read",
								"{{content_id}}"
							]
						},
						"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": [
						{
							"name": "Content Read - 200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-Authenticated-User-token",
										"value": "{{keycloak_access_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{kong_api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/content/v2/read/{{content_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"content",
										"v2",
										"read",
										"{{content_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 23 Nov 2020 04:48:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-RateLimit-Limit-hour",
									"value": "30000"
								},
								{
									"key": "X-RateLimit-Remaining-hour",
									"value": "29999"
								},
								{
									"key": "Referrer-Policy",
									"value": "origin-when-cross-origin, strict-origin-when-cross-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-response-length",
									"value": "2759"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "master-only"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "11"
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "35"
								},
								{
									"key": "Via",
									"value": "kong/0.14.1"
								},
								{
									"key": "X-Proxy-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Proxy-Cache-Date",
									"value": "Mon, 23 Nov 2020 04:48:35 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"api.content.read\",\n    \"ver\": \"1.0\",\n    \"ts\": \"2020-12-09T12:09:04.202Z\",\n    \"params\": {\n        \"resmsgid\": \"548b82a0-3a17-11eb-be5b-f9d249ba9049\",\n        \"msgid\": \"5488ea90-3a17-11eb-be5b-f9d249ba9049\",\n        \"status\": \"successful\",\n        \"err\": null,\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"content\": {\n            \"ownershipType\": [\n                \"createdBy\"\n            ],\n            \"code\": \"org.sunbird.ccG6ru\",\n            \"credentials\": {\n                \"enabled\": \"No\"\n            },\n            \"channel\": \"in.ekstep\",\n            \"language\": [\n                \"English\"\n            ],\n            \"mimeType\": \"application/pdf\",\n            \"idealScreenSize\": \"normal\",\n            \"createdOn\": \"2020-12-09T12:08:54.913+0000\",\n            \"objectType\": \"Content\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"contentDisposition\": \"inline\",\n            \"lastUpdatedOn\": \"2020-12-09T12:08:54.913+0000\",\n            \"contentEncoding\": \"identity\",\n            \"contentType\": \"Resource\",\n            \"dialcodeRequired\": \"No\",\n            \"identifier\": \"do_1131687689003827201864\",\n            \"lastStatusChangedOn\": \"2020-12-09T12:08:54.913+0000\",\n            \"audience\": [\n                \"Student\"\n            ],\n            \"os\": [\n                \"All\"\n            ],\n            \"visibility\": \"Default\",\n            \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n            \"mediaType\": \"content\",\n            \"osId\": \"org.ekstep.quiz.app\",\n            \"languageCode\": [\n                \"en\"\n            ],\n            \"version\": 2,\n            \"versionKey\": \"1607515734913\",\n            \"license\": \"CC BY 4.0\",\n            \"idealScreenDensity\": \"hdpi\",\n            \"framework\": \"NCF\",\n            \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"compatibilityLevel\": 1,\n            \"name\": \"API DOCUMENTATION CONTENT\",\n            \"status\": \"Draft\"\n        }\n    }\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Content Update",
			"item": [
				{
					"name": "Content Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json()",
									"",
									"//Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Content-Encoding header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Encoding\");",
									"});",
									"pm.test(\"Content-Encoding header is gzip\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('gzip');",
									"});",
									"",
									"pm.test(\"Test data type of the response and keys\", () => {",
									"  pm.expect(jsonResponse).to.be.an(\"object\").that.has.all.keys('id', 'ver', 'ts', 'params', 'responseCode', 'result');",
									"  pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ver).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.ts).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.responseCode).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params).to.be.an(\"object\").that.has.all.keys('resmsgid', 'msgid', 'err', 'status', 'errmsg');",
									"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.msgid).to.be.null;",
									"  pm.expect(jsonResponse.params.err).to.be.null;",
									"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
									"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
									"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
									"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
									"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
									"});",
									"",
									"//Validation",
									"pm.test(\"id should be api.content.update\", function () {",
									"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
									"});",
									"pm.test(\"ver should be 4.0\", function () {",
									"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
									"});",
									"pm.test(\"params.status should be successful\", function () {",
									"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
									"});",
									"pm.test(\"responseCode should be OK\", function () {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
									"});",
									"pm.test(\"identifier should be equal to \" + pm.globals.get(\"content_id\"), function () {",
									"    pm.expect(jsonResponse.result.identifier).to.eql(pm.globals.get(\"content_id\"));",
									"});",
									"pm.test(\"node_id should be equal to \" + pm.globals.get(\"content_id\"), function () {",
									"    pm.expect(jsonResponse.result.node_id).to.eql(pm.globals.get(\"content_id\"));",
									"});",
									"",
									"// Set global variable",
									"pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{keycloak_access_token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{kong_api_key}}",
								"type": "text"
							},
							{
								"key": "X-Channel-Id",
								"value": "{{channel_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/content/v2/update/{{content_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"content",
								"v2",
								"update",
								"{{content_id}}"
							]
						},
						"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}